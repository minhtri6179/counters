version: 2.1

orbs:
  docker: circleci/docker@1.5.0
executors:
  docker-publisher: 
    environment:
      IMAGE_NAME: minhtri6179/counters
    docker: 
      - image: circleci/node:latest
        auth:
            username: $DOCKERHUB_USERNAME
            password: $DOCKERHUB_PASSWORD

jobs:
  run_linter:
    docker:
      - image: cimg/node:21.4.0

    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
              npm install
      - run: 
          name: Run Linter
          command: |
              make lint

  build_and_test:
    environment:
      TEST_RESULTS: /tmp/test-results
    docker:
      - image: cimg/node:21.4.0

      - image: postgres:12.17
        environment:
          POSTGRES_USER: root 
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: counters
          POSTGRES_HOST_AUTH_METHOD: trust

    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Install dependencies
          command: |
            npm install
      #  Wait for Postgres to be ready before proceeding
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run unit tests
          environment: # environment variables for the database url and path to migration files
            CONTACTS_DB_URL: $CONTACTS_DB_URL
          command: |
            make migrateup
            make test | tee ${TEST_RESULTS}/test.out

      - run: 
          name: Run coverity scan
          command: |
              make coverage

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results
  
  push_image_to_registry: 
    executor: docker-publisher
    steps: 
      - checkout
      - setup_remote_docker
      - run: 
          name: Create env file 
          command: |
              echo DB_HOST="$DB_HOST" >> .env
              echo DB_USER="$DB_USER" >> .env
              echo DB_PASSWORD="$DB_PASSWORD" >> .env
              echo DB_NAME="$DB_NAME" >> .env
              echo HOST="$HOST" >> .env
              echo PORT="$PORT" >> .env
              cat .env
      - run: 
          name: TESTING
          command: |
              cat .env
      - run: 
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker build -t $IMAGE_NAME .
            docker push $IMAGE_NAME:latest
  
  deploy_to_production:
    docker:
      - image: cimg/node:21.4.0

    steps:
      - checkout
      - run: 
          name: Deploy
          command: |
              curl $DEPLOY_HOOKS

workflows:
  main:
    jobs:
      - run_linter 
      - build_and_test

      - push_image_to_registry:
          requires:
            - run_linter
            - build_and_test
      - deploy_to_production:
          requires:
            - push_image_to_registry

      # - hold:
      #     type: approval
      #     requires:
      #       - push_image_to_registry
      #     filters:
      #       branches:
      #         only: master

      # - deploy_to_production:
      #     requires:
      #       - hold
